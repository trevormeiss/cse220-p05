//**************************************************************************************************************
// CLASS: BigCalc
//
// DESCRIPTION
// Implements the Bigint calculator.
//
// AUTHOR INFORMATION
// Kevin R. Burger [KRB]
//
// Mailing Address:
// Computer Science & Engineering
// School of Computing, Informatics, and Decision Systems Engineering
// Arizona State University
// Tempe, AZ 85287-8809
//
// Email: burgerk@asu
// Web:   http://kevin.floorsoup.com
//**************************************************************************************************************
#ifndef BIGCALC_HPP
#define BIGCALC_HPP

#include "BigInt.hpp"

class BigCalc {
public:
	//==========================================================================================================
	// PUBLIC TYPES
	//==========================================================================================================
    
	typedef enum { eAdd, eDiv, eMod, eMult, eSub, eQuit } tCommand;
    
	//==========================================================================================================
	// PUBLIC FUNCTION MEMBERS
	//==========================================================================================================
    
	//----------------------------------------------------------------------------------------------------------
    // Default ctor.
	//----------------------------------------------------------------------------------------------------------
	BigCalc();
    
	//----------------------------------------------------------------------------------------------------------
    // Destructor.
	//----------------------------------------------------------------------------------------------------------
	~BigCalc()
	{
	}
    
protected:
    //==========================================================================================================
    // PROTECTED FUNCTION MEMBERS
    //==========================================================================================================
    
	//----------------------------------------------------------------------------------------------------------
	// GetBigInt()
	//
	// Displays the prompt string pPrompt. Reads a string representing a bigint from the stream pStream and
	// returns the corresponding BigInt.
	//
	// THROWS: constExcepQuit if "quit" is entered as the string.
	//----------------------------------------------------------------------------------------------------------
	BigInt GetBigInt(char const *pPrompt) const;
    
	//----------------------------------------------------------------------------------------------------------
	// GetCommand()
	//
	// Displays the prompt string pPrompt and reads a command to be performed.
	//----------------------------------------------------------------------------------------------------------
	tCommand GetCommand(char const *pPrompt) const;
    
	//----------------------------------------------------------------------------------------------------------
	// Run()
	//
	// The main processing loop.
	//----------------------------------------------------------------------------------------------------------
	void Run();
    
private:
    //==========================================================================================================
    // PRIVATE FUNCTION MEMBERS
    //==========================================================================================================
    
	//----------------------------------------------------------------------------------------------------------
	// Copy ctor.
	//----------------------------------------------------------------------------------------------------------
	BigCalc(BigCalc const& pBigCalc);
    
    //----------------------------------------------------------------------------------------------------------
    // Overloaded assignment = operator.
    //----------------------------------------------------------------------------------------------------------
    BigCalc& operator=(BigCalc const& pBigCalc);
    
    //==========================================================================================================
    // PRIVATE DATA MEMBERS
    //==========================================================================================================
};

#endif
